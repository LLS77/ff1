name: Deploy WireGuard

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Custom app name (optional)'
        required: false
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: latest

      - name: Generate fly.toml
        id: config
        run: |
          APP_NAME=${{ github.event.inputs.app_name }}
          [[ -z "$APP_NAME" ]] && APP_NAME="wg-${{ github.run_id }}"
          
          cat > fly.toml <<EOF
          app = "$APP_NAME"
          primary_region = "hkg"

          [build]
            image = "fscarmen/flyio-wireguard"

          [env]
            PEER_NAME = "client1"
            WG_PORT = "51820"
          EOF

          echo "::set-output name=app_name::$APP_NAME"

      - name: Authenticate Flyctl
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "$FLY_API_TOKEN" | flyctl auth token || {
            echo "::error::Flyctl authentication failed. Please check your FLY_API_TOKEN secret."
            exit 1
          }

      - name: Deploy application
        env:
          FLY_APP_NAME: ${{ steps.config.outputs.app_name }}
        run: |
          flyctl deploy --remote-only || {
            echo "::error::Deployment failed. Check Flyctl logs for details."
            flyctl logs --since 5m || echo "No recent logs available"
            exit 1
          }

      - name: Get client config
        env:
          FLY_APP_NAME: ${{ steps.config.outputs.app_name }}
        run: |
          # 等待应用完全启动
          for attempt in {1..5}; do
            if flyctl status | grep -q "running"; then
              break
            fi
            sleep 10
            echo "Attempt $attempt/5: Waiting for app to start..."
          done

          # 尝试获取配置
          if ! flyctl ssh console -C "cat /config/peer_client1.conf" 2>/dev/null; then
            echo "::error::Failed to retrieve client configuration after multiple attempts"
            exit 1
          fi
